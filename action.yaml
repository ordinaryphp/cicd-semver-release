name: 'Create CI/CD Semver Release'
description: 'Automatically create a release on pull request completion.'
inputs:
  token:
    type: string
    description: 'Custom app or personal access token to use for release creation. (Required if tag push should trigger a workflow)'
  prefix:
    type: string
    description: 'Prefix to add to semver'
    default: 'v'
  suffix:
    type: string
    description: 'Suffix to add to semver'
    default: ''
  major_token:
    type: string
    description: 'Token in commits to trigger a major version change'
    default: '#vmajor'
  minor_token:
    type: string
    description: 'Token in commits to trigger a minor version change'
    default: '#vminor'
  patch_token:
    type: string
    description: 'Token in commits to trigger a patch version change'
    default: '#vpatch'
  default_bump:
    type: string
    description: 'The default version bump when no tokens are found (major, minor, patch, none)'
    default: 'none'
  strict_semver_last:
    type: boolean
    description: 'When detecting last semver, requires the semver to have the configured prefix and suffix'
    default: false
  create_release:
    type: boolean
    description: 'Use this to add additional conditions for or for not creating a release'
    default: true

outputs:
  tag_latest:
    description: "Latest semver tag detected"
    value: ${{ steps.tag_info.outputs.tagLatest }}
  semver_latest:
    description: "Latest semver detected"
    value: ${{ steps.tag_info.outputs.semverLatest }}
  tag_next:
    description: "Next semver tag to be created"
    value: ${{ steps.semver_next.outputs.tagNext }}
  semver_next:
    description: "Next semver to be created"
    value: ${{ steps.semver_next.outputs.semverNext }}
  change_type:
    description: "Change type"
    value: ${{ steps.get_changes.outputs.changeType }}
runs:
  using: "composite"
  steps:
    - name: Validate Event
      shell: bash
      env:
        eventType: ${{ github.event_name }}
      # language=BASH
      run: |
        if [ "$eventType" != "pull_request" ]; then
          echo "This action is only valid on pull request events" >&2
          exit 1
        fi
    - name: Prepare Branch
      shell: bash
      # language=BASH
      run: |
        inTree="$(git rev-parse --is-inside-work-tree)"
        
        if [ "$inTree" != true ]; then
          echo "Not in working tree" >&2
          exit 1
        fi
        
        isShallow="$(git rev-parse --is-shallow-repository)"
        
        if [ "$isShallow" != true ]; then
          echo "Retrieving full commit depth"
          git fetch --unshallow
        fi
        
        echo "Fetching Tags"
        git fetch --tags
    - name: Get Latest Tag
      id: tag_info
      shell: bash
      env:
        mergeCommit: ${{ github.event.pull_request.merged && github.event.pull_request.merge_commit_sha || '' }}
      # language=BASH
      run: |
        set +e
        
        function filterPrefix() {
          prefix='${{ inputs.prefix }}'
        
          if [ -z "$prefix" ] || [ "$strictSemver" == "false" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line:0:${#prefix}}" == "$prefix" ]; then
              echo "$line"
            fi
          done
        }
        
        function filterSuffix() {
          suffix='${{ inputs.suffix }}'
        
          if [ -z "$suffix" ] || [ "$strictSemver" == "false" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line: ${#suffix}}" == "$suffix" ]; then
              echo "$line"
            fi
          done
        }
        
        tagLatest="$(git tag | grep -P '\d+\.\d+\.\d+' | filterPrefix | filterSuffix | sort -Vr | head -n 1)"
        
        if [ -z "$tagLatest" ]; then
          echo "No latest tag found defaulting to 0.0.0"
          tagLatest='0.0.0'
        fi
        
        if [ -n "$mergeCommit" ]; then
        echo "Checking for existing semver tags on $mergeCommit"
          mergeCommitTag="$(git describe --tags --exact-match "$mergeCommit" 2>&1 | grep -P '\d+\.\d+\.\d+' | filterPrefix | filterSuffix)"
          echo "Tags: $(git describe --tags --exact-match "$mergeCommit")"
          if [ -n "$mergeCommitTag" ]; then
            echo "Merge commit already has semver tags: $mergeCommitTags" >&2
            exit 1
          fi
        fi
        
        semverLatest="$(grep -Po '(?<!\d)\d+\.\d+\.\d+(?!\d)' <<< "$tagLatest")"
        IFS=. read lastMajor lastMinor lastPatch <<< "$semverLatest"
        
        echo "tagLatest: $tagLatest"
        echo "semverLatest: $semverLatest"
        echo "  lastMajor: $lastMajor"
        echo "  lastMinor: $lastMinor"
        echo "  lastPatch: $lastPatch"
        
        echo "tagLatest=$tagLatest" >> "$GITHUB_OUTPUT"
        echo "semverLatest=$semverLatest" >> "$GITHUB_OUTPUT"
        echo "lastMajor=$lastMajor" >> "$GITHUB_OUTPUT"
        echo "lastMinor=$lastMinor" >> "$GITHUB_OUTPUT"
        echo "lastPatch=$lastPatch" >> "$GITHUB_OUTPUT"
    - name: 'Determine Version Change Requirements'
      id: get_changes
      shell: bash
      env:
        sourceHead: ${{ github.event.pull_request.head.sha }}
        targetHead: ${{ github.event.pull_request.base.sha }}
        majorToken: ${{ inputs.major_token }}
        minorToken: ${{ inputs.minor_token }}
        patchToken: ${{ inputs.patch_token }}
        defaultBump: ${{ inputs.default_bump }}
      # language=BASH
      run: |
        echo "Latest source commit: $sourceHead"
        echo "Latest target commit: $targetHead"
        
        echo "Token config:"
        echo "  Major: $majorToken"
        echo "  Minor: $minorToken"
        echo "  Patch: $patchToken"
        
        commitLog=$(git log --format=%B "$targetHead".."$sourceHead")
        
        shopt -s nocasematch
        case "$commitLog" in
          *$majorToken* ) changeType=major;;
          *$minorToken* ) changeType=minor;;
          *$patchToken* ) changeType=patch;;
        esac
        
        if [ -z "$changeType" ]; then
          echo "No version tokens found in commits" >&2
        
          case "$defaultBump" in
            major|minor|patch|none)
              echo "Defaulting to $defaultBump"
              changeType="$defaultBump"
              ;;
            error) exit 1;;
            *)
              echo "Invalid or empty value for default_bump input" >&2
              exit 1
              ;;
          esac
        fi
        
        echo "Change Type: $changeType"
        echo "changeType=$changeType" >> "$GITHUB_OUTPUT"
    - name: "Get next semver"
      id: semver_next
      if: steps.get_changes.outputs.changeType != 'none'
      shell: bash
      env:
        changeType: ${{ steps.get_changes.outputs.changeType }}
        semverMajor: ${{ steps.tag_info.outputs.lastMajor }}
        semverMinor: ${{ steps.tag_info.outputs.lastMinor }}
        semverPatch: ${{ steps.tag_info.outputs.lastPatch }}
        prefix: ${{ inputs.prefix }}
        suffix: ${{ inputs.suffix }}
      # language=BASH
      run: |
        set +e
        case "$changeType" in
          major)
            ((semverMajor++))
            semverMinor=0
            semverPatch=0
            ;;
          minor)
            ((semverMinor++))
            semverPatch=0
            ;;
          patch)
            ((semverPatch++))
            ;;
          *)
            echo "Unsupported change type $changeType" >&2
            exit 1
            ;;
        esac
        
        semverNext="$semverMajor.$semverMinor.$semverPatch"
        tagNext="${prefix}${semverNext}${suffix}"
        
        echo "Next Semver: $semverNext"
        echo "Next Tag: $tagNext"
        
        echo "semverNext=$semverNext" >> "$GITHUB_OUTPUT"
        echo "tagNext=$tagNext" >> "$GITHUB_OUTPUT"
    - name: 'Create Release'
      id: create_release
      if: inputs.create_release && github.event.pull_request.merged && github.event.pull_request.merge_commit_sha && steps.get_changes.outputs.changeType != 'none'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.token || github.token }}
        releaseTag: ${{ steps.semver_next.outputs.tagNext }}
        releaseSemver: ${{ steps.semver_next.outputs.semverNext }}
        mergeCommit: ${{ github.event.pull_request.merge_commit_sha }}
      # language=BASH
      run: |
        set -e
        
        echo "Creating release"
        gh release create "$releaseTag" --target "$mergeCommit" --title "Release: $releaseSemver ($releaseTag)" --generate-notes --latest
