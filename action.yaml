name: 'Create CI/CD Semver Release'
description: 'Create a ci/cd release based on the ordinary git flow.'
inputs:
  prefix:
    type: string
    description: 'Prefix to add to semver'
    default: 'v'
  suffix:
    type: string
    description: 'Suffix to add to semver'
    default: ''
  strict_semver_last:
    type: boolean
    description: 'When detecting last semver, requires the semver to have the configured prefix and suffix'
    default: false
  create_release:
    type: boolean
    default: true
outputs:
  tag_last:
    description: "Last semver tag detected"
    value: ${{ steps.semver_last.outputs.last_tag }}
  semver_last:
    description: "Last semver detected"
    value: ${{ steps.semver_last.outputs.last_semver }}
  tag_next:
    description: "Next semver tag to be created"
    value: ${{ steps.semver_next.outputs.next_tag }}
  semver_next:
    description: "Next semver to be created"
    value: ${{ steps.semver_next.outputs.next_semver }}
  change_compatibility:
    description: "Change compatibility"
    value: ${{ steps.pr_data.outputs.change_compatibility }}
  change_type:
    description: "Change type"
    value: ${{ steps.pr_data.outputs.change_type }}
runs:
  using: "composite"
  steps:
    - name: 'Get Labels'
      id: get_labels
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      # language=BASH
      run: |
        set +e
        prNumber=$(cut -d/ -f1 <<< "$GITHUB_REF_NAME")
        prPayloadUrl="repos/$GITHUB_REPOSITORY/pulls/$prNumber"
        
        labels="$(gh api -H "Accept: application/vnd.github+json" "$prPayloadUrl" | jq -c '[.labels[].name]')"
        echo "Labels: $labels"
        echo "pr_labels=$labels" >> "$GITHUB_OUTPUT"
    - name: 'Get Pull Request Data'
      id: pr_data
      shell: bash
      env:
        isBug: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'bug') }}
        isEnhancement: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'enhancement') }}
        isBc: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'backward-compatible') }}
        isNotBc: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'not-backward-compatible') }}
      # language=BASH
      run: |
        set +e
        hasError=false
        
        if [ "$isBug" == "false" ] && [ "$isEnhancement" == "false" ]; then
          echo "Missing ONE of required tags (bug || enhancement)" >&2
          hasError=true
        fi
        
        if [ "$isBug" == "true" ] && [ "$isEnhancement" == "true" ]; then
          echo "Conflicting tags (bug && enhancement)" >&2
          hasError=true
        fi
        
        if [ "$isBc" == "false" ] && [ "$isNotBc" == "false" ]; then
          echo "Missing ONE of required tags (backward-compatible || not-backward-compatible)" >&2
          hasError=true
        fi
        
        if [ "$isBc" == "true" ] && [ "$isNotBc" == "true" ]; then
          echo "Conflicting tags (backward-compatible && not-backward-compatible)" >&2
          hasError=true
        fi
        
        if [ "$hasError" == "true" ]; then
         exit 1
        fi
        
        [ "$isBc" == "true" ] && changeCompat="backward-compatible"
        [ "$isNotBc" == "true" ] && changeCompat="not-backward-compatible"
        [ "$isBug" == "true" ] && changeType="bug"
        [ "$isEnhancement" == "true" ] && changeType="enhancement"
        
        echo "Change Type: $changeType"
        echo "Compatibility Type: $changeCompat"
        
        echo "change_type=$changeType" >> "$GITHUB_OUTPUT"
        echo "change_compatibility=$changeCompat" >> "$GITHUB_OUTPUT"
    - name: 'Get Last Semver'
      id: semver_last
      shell: bash
      # language=BASH
      run: |
        set +e
        
        strictSemver='${{ inputs.strict_semver_last }}'
        
        echo "Strict semver matching: $strictSemver"
        
        function filterPrefix() {
          prefix='${{ inputs.prefix }}'
        
          if [ -z "$prefix" ] || [ "$strictSemver" == "false" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line:0:${#prefix}}" == "$prefix" ]; then
              echo "$line"
            fi
          done
        }
        
        function filterSuffix() {
          suffix='${{ inputs.suffix }}'
        
          if [ -z "$suffix" ] || [ "$strictSemver" == "false" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line: ${#suffix}}" == "$suffix" ]; then
              echo "$line"
            fi
          done
        }
        
        tagMatch="$(git tag | filterPrefix | filterSuffix | head -n 1)"
        
        if [ -z "$tagMatch" ]; then
          echo "No tag found - assuming semver 0.0.0 as last tag"
          semverMatch="0.0.0"
        else
          semverMatch="$(echo "$tagMatch" | grep -Po '(?<!\d)\d+\.\d+\.\d+(?!\d)')"
        fi
        
        IFS=. read lastMajor lastMinor lastPatch <<< "$semverMatch"
        
        echo "Last tag: ${tagMatch:-(NONE)}"
        echo "Last semver: $semverMatch"
        echo "  Major: $lastMajor"
        echo "  Minor: $lastMinor"
        echo "  Patch: $lastPatch"
        
        echo "last_tag=$tagMatch" >> "$GITHUB_OUTPUT"
        echo "last_semver=$semverMatch" >> "$GITHUB_OUTPUT"
        echo "last_major=$lastMajor" >> "$GITHUB_OUTPUT"
        echo "last_minor=$lastMinor" >> "$GITHUB_OUTPUT"
        echo "last_patch=$lastPatch" >> "$GITHUB_OUTPUT"
    - name: "Get next semver"
      id: semver_next
      shell: bash
      env:
        changeType: ${{ steps.pr_data.outputs.change_type }}
        changeCompatibility: ${{ steps.pr_data.outputs.change_compatibility }}
      # language=BASH
      run: |
        set +e
        semverMajor='${{ steps.semver_last.outputs.last_major }}'
        semverMinor='${{ steps.semver_last.outputs.last_minor }}'
        semverPatch='${{ steps.semver_last.outputs.last_patch }}'
        
        case "$changeCompatibility:$changeType" in
          not-backward-compatible:*)
            ((semverMajor++))
            semverMinor=0
            semverPatch=0
            ;;
          backward-compatible:enhancement)
            ((semverMinor++))
            semverPatch=0
            ;;
          backward-compatible:bug)
            ((semverPatch++))
            ;;
          *)
            echo "Unsupported change type $changeCompatibility:$changeType" >&2
            exit 1
            ;;
        esac
        
        prefix='${{ inputs.prefix }}'
        suffix='${{ inputs.suffix }}'
        
        semverNext="$semverMajor.$semverMinor.$semverPatch"
        tagNext="${prefix}${semverNext}${suffix}"
        
        echo "Next Semver: $semverNext"
        echo "Next Tag: $tagNext"
        
        echo "next_semver=$semverNext" >> "$GITHUB_OUTPUT"
        echo "next_tag=$tagNext" >> "$GITHUB_OUTPUT"
