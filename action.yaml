name: 'Create CI/CD Semver Release'
description: 'Create a ci/cd release based on the ordinary git flow.'
inputs:
  prefix:
    type: string
    description: 'Prefix to add to semver'
    default: 'v'
  suffix:
    type: string
    description: 'Suffix to add to semver'
    default: ''
  strict_semver_last:
    type: boolean
    description: 'When detecting last semver, requires the semver to have the configured prefix and suffix'
  create_release:
    type: boolean
    default: true
outputs:
  release_tag:
    description: "Release tag"
    value: ${{ steps.create_release.outputs.release_tag }}
runs:
  using: "composite"
  steps:
    - name: 'Get Labels'
      id: get_labels
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      # language=BASH
      run: |
        prNumber=$(cut -d/ -f1 <<< "$GITHUB_REF_NAME")
        prPayloadUrl="repos/$GITHUB_REPOSITORY/pulls/$prNumber"
        echo "$prPayloadUrl"
        labels="$(gh api -H "Accept: application/vnd.github+json" "$prPayloadUrl" | jq -c '[.labels[].name]')"
        echo "$labels"
        echo "pr_labels=$labels" >> "$GITHUB_OUTPUT"
    - name: 'Get Pull Request Data'
      id: pr_data
      shell: bash
      env:
        isBug: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'bug') }}
        isEnhancement: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'enhancement') }}
        isBc: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'backward-compatible') }}
        isNotBc: ${{ contains(fromJSON(steps.get_labels.outputs.pr_labels), 'not-backward-compatible') }}
      # language=BASH
      run: |
        cat <<EOF
        isBug=$isBug
        isEnhancement=$isEnhancement
        isBc=$isBc
        isNotBc=$isNotBc
        EOF
    - name: 'Get Last Semver'
      id: semver_last
      shell: bash
      # language=BASH
      run: |
        set +e
        
        echo 'Strict semver match: ${{ inputs.strict_semver_last }}'
        
        function filterPrefix() {
          prefix='${{ inputs.prefix }}'
        
          if [ -z "$prefix" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line:0:${#prefix}}" == "$prefix" ]; then
              echo "$line"
            fi
          done
        }
        
        function filterSuffix() {
          suffix='${{ inputs.suffix }}'
        
          if [ -z "$suffix" ]; then
            cat
            return 0
          fi
        
          while read -r line; do
            if [ "${line: ${#suffix}}" == "$suffix" ]; then
              echo "$line"
            fi
          done
        }
        
        tagMatch="$(git tag | filterPrefix | filterSuffix | head -n 1)"
        
        if [ -z "$tagMatch" ]; then
          echo "No tag found - assuming semver 0.0.0 as last tag"
          semverMatch="0.0.0"
        else
          semverMatch="$(echo "$tagMatch" | grep -Po '(?<!\d)\d+\.\d+\.\d+(?!\d)')"
        fi
        
        IFS=. read lastMajor lastMinor lastPatch <<< "$semverMatch"
        
        echo "Last tag: ${tagMatch:-(NONE)}"
        echo "Last semver: $semverMatch"
        echo "  Major: $lastMajor"
        echo "  Minor: $lastMinor"
        echo "  Patch: $lastPatch"
        
        echo "lastTag=$tagMatch" >> "$GITHUB_OUTPUT"
        echo "lastSemver=$semverMatch" >> "$GITHUB_OUTPUT"
        echo "lastMajor=$lastMajor" >> "$GITHUB_OUTPUT"
        echo "lastMinor=$lastMinor" >> "$GITHUB_OUTPUT"
        echo "lastPatch=$lastPatch" >> "$GITHUB_OUTPUT"
    - name: "Get next semver"
      shell: bash
      # language=BASH
      run: |
        set +e
        
        sourceBranch="$GITHUB_HEAD_REF"
        targetBranch="$GITHUB_BASE_REF"
        
        echo "PR Source: $sourceBranch"
        echo "PR Target: $targetBranch"
        
        branchType="$(echo "$sourceBranch" | grep -oi 'major\|minor\|patch')"
        branchType="${branchType,,}"
        
        if [ -z "$branchType" ]; then
          echo "Branch type could not be detected (major, minor, patch not found in branch name)" >&2
          exit 1
        fi
        
        echo "Branch type: $branchType"
        
        semverMajor='${{ steps.semver_last.outputs.lastMajor }}'
        semverMinor='${{ steps.semver_last.outputs.lastMinor }}'
        semverPatch='${{ steps.semver_last.outputs.lastPatch }}'
        
        case "$branchType" in
          major)
            ((semverMajor++))
            ;;
          minor)
            ((semverMinor++))
            ;;
          patch)
            ((semverPatch++))
            ;;
          *)
            echo "Unsupported branch type $branchType" >&2
            exit 1
        esac
        
        prefix='${{ inputs.prefix }}'
        suffix='${{ inputs.suffix }}'
        
        semverNext="$semverMajor.$semverMinor.$semverPatch"
        tagNext="${prefix}${semverNext}${suffix}"
        
        echo "Next Semver: $semverNext"
        echo "Next Tag: $tagNext"
        
        echo "semverNext=$semverNext" >> "$GITHUB_OUTPUT"
        echo "tagNext=$tagNext" >> "$GITHUB_OUTPUT"
